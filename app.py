from flask import Flask, request
import requests
import os
import sys
import time
import random

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_TOKEN = os.getenv("VK_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = {
    "VK_TOKEN": VK_TOKEN,
    "OPENROUTER_API_KEY": OPENROUTER_API_KEY,
    "CONFIRMATION_TOKEN": CONFIRMATION_TOKEN,
}

for name, value in required_vars.items():
    if not value:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}", file=sys.stderr)
    else:
        print(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(value)})", file=sys.stderr)

def get_openrouter_response(prompt: str) -> str:
    start_time = time.time()
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "mistralai/mistral-7b-instruct:free",
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.7,
        "max_tokens": 800
    }

    try:
        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ OpenRouter (Mistral): {prompt[:50]}...", file=sys.stderr)
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        
        if 'choices' not in result or len(result['choices']) == 0:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
            
        answer = result['choices'][0]['message']['content']
        answer = answer.strip()
        
        if not answer:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
            
        duration = time.time() - start_time
        print(f"ü§ñ –û—Ç–≤–µ—Ç –æ—Ç Mistral –∑–∞ {duration:.2f} —Å–µ–∫: {answer[:60]}...", file=sys.stderr)
        return answer
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ OpenRouter: {e}"
        print(f"‚ùå {error_msg}", file=sys.stderr)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@app.route('/vk', methods=['GET', 'POST'])
def vk_bot():
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ GET –¥–ª—è UptimeRobot
    if request.method == 'GET':
        return "OK", 200

    try:
        data = request.get_json()
        if data is None:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ-JSON –∑–∞–ø—Ä–æ—Å", file=sys.stderr)
            return "ok", 400

        print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –í–ö: type={data.get('type')}", file=sys.stderr)

        if data.get('type') == 'confirmation':
            print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {CONFIRMATION_TOKEN}", file=sys.stderr)
            return CONFIRMATION_TOKEN

        if data.get('type') == 'message_new':
            try:
                user_id = data['object']['message']['from_id']
                text = data['object']['message']['text']
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}", file=sys.stderr)
            except KeyError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –í–ö", file=sys.stderr)
                return "ok"

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            time.sleep(0.3)

            ai_response = get_openrouter_response(text)

            # üîí –ì–ê–†–ê–ù–¢–ò–Ø: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if not ai_response or not ai_response.strip():
                ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ."

            if len(ai_response) > 3900:
                ai_response = ai_response[:3900] + "..."

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π random_id
            random_id = random.randint(1, 2**31 - 1)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –í–ö
            try:
                vk_resp = requests.post(
                    "https://api.vk.com/method/messages.send",
                    data={
                        "user_id": user_id,
                        "message": ai_response,
                        "random_id": random_id,
                        "access_token": VK_TOKEN,
                        "v": "5.131"
                    },
                    timeout=10
                )
                vk_resp.raise_for_status()
                result = vk_resp.json()

                if 'error' in result:
                    error_code = result['error']['error_code']
                    error_msg = result['error']['error_msg']
                    print(f"‚ùå –û—à–∏–±–∫–∞ –í–ö: [{error_code}] {error_msg}", file=sys.stderr)
                else:
                    msg_id = result.get('response', 'N/A')
                    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (ID: {msg_id})", file=sys.stderr)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –í–ö: {e}", file=sys.stderr)

        return "ok"

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        return "ok"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...", file=sys.stderr)
    app.run(host='0.0.0.0', port=port)
