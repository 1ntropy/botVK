from flask import Flask, request
import requests
import os
import sys

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_TOKEN = os.getenv("VK_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")
CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
required_vars = {
    "VK_TOKEN": VK_TOKEN,
    "YANDEX_API_KEY": YANDEX_API_KEY,
    "FOLDER_ID": FOLDER_ID,
    "CONFIRMATION_TOKEN": CONFIRMATION_TOKEN,
}

for name, value in required_vars.items():
    if not value:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}", file=sys.stderr)
    else:
        print(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(value)})", file=sys.stderr)

def get_yandex_gpt_response(prompt: str) -> str:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }

    try:
        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Yandex GPT: {prompt[:50]}...", file=sys.stderr)
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        answer = result['result']['alternatives'][0]['message']['text']
        print(f"ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò: {answer[:60]}...", file=sys.stderr)
        return answer
    except requests.exceptions.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ API: {e}"
        print(f"‚ùå {error_msg}", file=sys.stderr)
        return error_msg
    except KeyError as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT: {e}"
        print(f"‚ùå {error_msg}", file=sys.stderr)
        return error_msg
    except Exception as e:
        error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
        print(f"‚ùå {error_msg}", file=sys.stderr)
        return error_msg

@app.route('/vk', methods=['POST'])
def vk_bot():
     # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    raw_data = request.get_data(as_text=True)
    print(f"üì• Raw request body: {raw_data}", file=sys.stderr)

    try:
        data = request.get_json()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON: {e}", file=sys.stderr)
        return "ok", 400

    if not data:
        print("‚ùå –ü—É—Å—Ç–æ–π JSON", file=sys.stderr)
        return "ok", 400

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if data.get('type') == 'confirmation':
        print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '{CONFIRMATION_TOKEN}'", file=sys.stderr)
        # –í–∞–∂–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¢–û–õ–¨–ö–û —Å—Ç—Ä–æ–∫—É, –±–µ–∑ JSON, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return CONFIRMATION_TOKEN

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if data.get('type') == 'message_new':
        print("üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...", file=sys.stderr)
        # ... (–æ—Å—Ç–∞–≤—å —Ç–≤–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ò–ò)

    return "ok"

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", file=sys.stderr)
        return "ok"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...", file=sys.stderr)
    app.run(host='0.0.0.0', port=port)

