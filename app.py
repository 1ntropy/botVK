from flask import Flask, request
import requests
import os
import sys

app = Flask(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
VK_TOKEN = os.getenv("VK_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")
CONFIRMATION_TOKEN = os.getenv("VK_CONFIRMATION_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
required_vars = {
    "VK_TOKEN": VK_TOKEN,
    "YANDEX_API_KEY": YANDEX_API_KEY,
    "FOLDER_ID": FOLDER_ID,
    "CONFIRMATION_TOKEN": CONFIRMATION_TOKEN,
}

for name, value in required_vars.items():
    if not value:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {name}", file=sys.stderr)
    else:
        print(f"‚úÖ {name} –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(value)})", file=sys.stderr)

def get_yandex_gpt_response(prompt: str) -> str:
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": "2000"
        },
        "messages": [
            {"role": "user", "text": prompt}
        ]
    }

    try:
        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Yandex GPT: {prompt[:50]}...", file=sys.stderr)
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        result = response.json()
        answer = result['result']['alternatives'][0]['message']['text']
        print(f"ü§ñ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò: {answer[:60]}...", file=sys.stderr)
        return answer
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Yandex GPT: {e}"
        print(f"‚ùå {error_msg}", file=sys.stderr)
        return error_msg

@app.route('/vk', methods=['POST'])
def vk_bot():
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON
        data = request.get_json()
        if data is None:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ-JSON –∑–∞–ø—Ä–æ—Å", file=sys.stderr)
            return "ok", 400

        print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –í–ö: type={data.get('type')}", file=sys.stderr)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if data.get('type') == 'confirmation':
            print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {CONFIRMATION_TOKEN}", file=sys.stderr)
            return CONFIRMATION_TOKEN  # ‚Üê –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞!

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if data.get('type') == 'message_new':
            try:
                user_id = data['object']['message']['from_id']
                text = data['object']['message']['text']
                print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}", file=sys.stderr)
            except KeyError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –í–ö", file=sys.stderr)
                return "ok"

            ai_response = get_yandex_gpt_response(text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –í–ö
            vk_send_url = "https://api.vk.com/method/messages.send"
            vk_data = {
                "user_id": user_id,
                "message": ai_response,
                "random_id": 0,
                "access_token": VK_TOKEN,
                "v": "5.131"
            }

            try:
                vk_resp = requests.post(vk_send_url, data=vk_data, timeout=10)
                vk_resp.raise_for_status()
                print(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", file=sys.stderr)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –í–ö: {e}", file=sys.stderr)

        return "ok"

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}", file=sys.stderr)
        return "ok"

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...", file=sys.stderr)
    app.run(host='0.0.0.0', port=port)
